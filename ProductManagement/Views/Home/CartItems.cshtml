@{
    ViewBag.Title = "Cart";
}

<div class="container">
    <h2>Shopping Cart</h2>
    <div id="cartContainer"></div>
    <button class="btn btn-primary" onclick="continueShopping()">Continue Shopping</button>
</div>

<!-- Bootstrap JS (optional, for dropdowns, modals, etc.) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

<script>
    // Function to bind cart items to a table
    function bindCartItems() {
        var cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        var cartContainer = document.getElementById('cartContainer');
        cartContainer.innerHTML = ''; // Clear previous content

        if (cartItems.length === 0) {
            cartContainer.innerHTML = '<p>No items in the cart.</p>';
            return;
        }

        var tableHtml = `
                <table class="table cart-table">
                    <thead>
                        <tr>
                            <th>S.No</th>
                            <th>Name</th>
                            <th>Qty</th>
                            <th>Unit Price</th>
                            <th>Total</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>`;

        cartItems.forEach(function (item, index) {
            var total = item.price * item.quantity;
            var rowHtml = `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${item.name}</td>
                        <td><input type="number" min="1" value="${item.quantity}" onchange="editQuantity(${index}, this.value)"></td>
                        <td>${parseFloat(item.price).toFixed(2)}</td>
                        <td>${total.toFixed(2)}</td>
                        <td>
                            <button class="btn btn-sm btn-danger" onclick="deleteItem(${index})">Delete</button>
                        </td>
                    </tr>`;
            tableHtml += rowHtml;
        });

        tableHtml += `
                    </tbody>
                </table>`;

        cartContainer.innerHTML = tableHtml;
    }

    // Function to edit the quantity of an item
    function editQuantity(index, newQuantity) {
        if (newQuantity < 1) {
            alert('Quantity must be at least 1.');
            return;
        }
        var cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        cartItems[index].quantity = parseInt(newQuantity);
        localStorage.setItem('cartItems', JSON.stringify(cartItems));
        bindCartItems(); // Rebind items after editing
    }

    // Function to edit an item
    function editItem(index) {
        // Implement edit functionality as needed
        console.log('Edit item:', index);
    }

    // Function to delete an item
    function deleteItem(index) {
        var confirmDelete = confirm('Are you sure you want to delete this item?');
        if (confirmDelete) {
            var cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
            cartItems.splice(index, 1);
            localStorage.setItem('cartItems', JSON.stringify(cartItems));
            bindCartItems(); // Rebind items after deleting
        }
    }

    // Function to continue shopping
    function continueShopping() {
        // Redirect to the category page
        window.location.href = '@Url.Action("Index")'; // Change the URL as needed
    }

    // Load cart items when the page loads
    window.onload = function () {
        bindCartItems();
    };
</script>